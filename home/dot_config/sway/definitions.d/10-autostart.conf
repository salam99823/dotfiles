# units

set $initialize_systemd 'systemctl --user import-environment SWAYSOCK DISPLAY I3SOCK WAYLAND_DISPLAY'
set $initialize_swww '[ -x "$(command -v swww-daemon)" ] && systemctl --now --user enable swww'
set $initialize_foot_server '[ -x "$(command -v foot)" ] && systemctl --now --user enable foot-server.socket && systemctl --now --user enable foot-server'
set $initialize_swayr_daemon '[ -x "$(command -v swayrd)" ] && systemctl --now --user enable swayrd'
set $initialize_workspace_icons '[ -x "$(command -v sworkstyle)" ] && systemctl --now --user enable sworkstyle'
set $initialize_poweralert_daemon '[ -x "$(command -v poweralertd)" ] && systemctl --now --user enable poweralertd'
set $initialize_idlehack_daemon '[ -x "$(command -v idlehack)" ] && systemctl --now --user enable idlehack'
set $initialize_idle_daemon '[ -x "$(command -v swayidle-conf)" ] && systemctl --now --user enable swayidle'
set $initialize_mounting_daemon '[ -x "$(command -v pcmanfm-qt)" ] || [ -x "$(command -v pcmanfm)" ] && systemctl --now --user enable pcmanfm'
set $initialize_way_displays '[ -x "$(command -v way-displays)" ] && systemctl --now --user enable way-displays'
set $initialize_waybar '[ -x "$(command -v waybar)" ] && systemctl --now --user enable waybar'
set $initialize_mako '[ -x "$(command -v mako)" ] && systemctl --now --user enable mako'
set $initialize_wob '[ -x "$(command -v wob)" ] && systemctl --now --user enable wob.socket && systemctl --now --user enable wob'

# autostarts

set $autostart_dex '[ -x "$(command -v dex)" ] && gdbus wait --session org.kde.StatusNotifierWatcher && dex -a -e SWAY'
set $autotiling '[ -x "$(command -v autotiling)" ] && autotiling || [ -x "$(command -v autotiling-rs)" ] && autotiling-rs'
set $flashfocus '[ -x "$(command -v flashfocus)" ] && flashfocus'
set $xdg-dirs '[ -x "$(command -v xdg-user-dirs-update)" ] && exec xdg-user-dirs-update'

set $kanshi '[ -x "$(command -v kanshi)" ] && pkill -x kanshi; exec kanshi'
set $enable_noisetorch '[ -x "$(command -v noisetorch)" ] && noisetorch -u && noisetorch -i'
set $disable_nm_applet_autostart '[ -x "$(command -v nm-applet)" ] && [ ! -f $HOME/.config/autostart/nm-applet.desktop ] && cp /etc/xdg/autostart/nm-applet.desktop $HOME/.config/autostart/nm-applet.desktop && echo "Hidden=true" >> $HOME/.config/autostart/nm-applet.desktop'

## daemons

set $swappy_notify '[ -x "$(command -v swappy)" ] && $script_path/screenshot-notify'
set $clip-persist '[ -x "$(command -v wl-clip-persist)" ] && pkill -x wl-clip-persist; wl-clip-persist --clipboard regular --all-mime-type-regex \'(?i)^(?!image/x-inkscape-svg).+\''
set $nm_applet '[ -x "$(command -v nm-applet)" ] && pkill -x nm-applet && dbus-launch nm-applet'
set $watch_playerctl '[ -x "$(command -v playerctl)" ] && pkill -x playerctl; playerctl -a metadata --format \"{{status}} {{title}}\" --follow | while read line; do ~/.local/bin/waybar-signal playerctl; ~/.local/bin/waybar-signal idle; done'
set $calendar_daemon 'calcurse --daemon'

set $cliphist_watch '[ -x "$(command -v wl-paste)" ] && [ -x "$(command -v cliphist)" ] && wl-paste --watch ~/.local/bin/waybar-signal clipboard'
set $cliphist_store '[ -x "$(command -v wl-paste)" ] && [ -x "$(command -v cliphist)" ] && wl-paste --watch cliphist store'

set $closeswaybg '[ -x "$(command -v swww-daemon)" ] && pkill swaybg'
set $apply_wallpaper '$script_path/switch_wallpaper'
## apply the keyboard layout from localectl if no keyboard layout has been set via config.d
set $auto_xdg_keyboard 'grep -q xkb_layout ~/.config/sway/config.d/*.conf || $script_path/keyboard'

set $reload_waybar '[ -x "$(command -v waybar)" ] && systemctl --user reload waybar'
set $reload_mako '[ -x "$(command -v mako)" ] && systemctl --user reload mako'
